package oracle.project.AssetManagement.uiview;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 20 23:00:14 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class YearlyAnalyticsBookOVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Touser {
            public Object get(YearlyAnalyticsBookOVVORowImpl obj) {
                return obj.getTouser();
            }

            public void put(YearlyAnalyticsBookOVVORowImpl obj, Object value) {
                obj.setTouser((String)value);
            }
        },
        LentItem {
            public Object get(YearlyAnalyticsBookOVVORowImpl obj) {
                return obj.getLentItem();
            }

            public void put(YearlyAnalyticsBookOVVORowImpl obj, Object value) {
                obj.setLentItem((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(YearlyAnalyticsBookOVVORowImpl object);

        public abstract void put(YearlyAnalyticsBookOVVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TOUSER = AttributesEnum.Touser.index();
    public static final int LENTITEM = AttributesEnum.LentItem.index();

    /**
     * This is the default constructor (do not remove).
     */
    public YearlyAnalyticsBookOVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Touser.
     * @return the Touser
     */
    public String getTouser() {
        return (String)getAttributeInternal(TOUSER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Touser.
     * @param value value to set the  Touser
     */
    public void setTouser(String value) {
        setAttributeInternal(TOUSER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LentItem.
     * @return the LentItem
     */
    public String getLentItem() {
        return (String)getAttributeInternal(LENTITEM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LentItem.
     * @param value value to set the  LentItem
     */
    public void setLentItem(String value) {
        setAttributeInternal(LENTITEM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
